/* ************************************************************************** */
/*                                                                            */
/*                                                        ::::::::            */
/*   read.c                                             :+:    :+:            */
/*                                                     +:+                    */
/*   By: pde-bakk <marvin@codam.nl>                   +#+                     */
/*                                                   +#+                      */
/*   Created: 2019/11/17 10:58:11 by pde-bakk       #+#    #+#                */
/*   Updated: 2019/11/20 11:43:46 by pde-bakk      ########   odam.nl         */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

int		ft_newlinecheck(char *s)
{
	int i;

	i = 0;
	while (s[i])
	{
		if (s[i] == '\n')
			return (i);
		i++;
	}
	return (0);
}

char	*ft_empty_buffer(char *buf, char *tmp)
{
	int	i;
	int start;

	i = 0;
//	printf("%s = buf\n", buf);
//	printf("%s= godverdomme tmp\n", tmp);
	if (buf[i] == 0)
		return (NULL);
	start = ft_newlinecheck(buf);
	while (buf[i] != 0)
		i++;
	tmp = (char*)malloc(sizeof(char) * (i - start + 1));
	if (tmp == NULL)
		return (NULL);
	i = 0;
	while (buf[start + i + 1] != 0)
	{
		tmp[i] = buf[start + i + 1];
		i++;
	}
	tmp[i] = 0;
//	printf("\nvanafhier%stothier\t%i=\n", tmp, i);
//	printf("%s= fktmp\n", tmp);
	return (tmp);
}

char	*ft_setstring(char *str, char *buf, char *tmp, int x, int ret)
{
	int i;
	int	b;

	i = 0;
	b = 0;
//	printf("%s%sYOYO\n", tmp, buf);
	str = calloc(BUFFER_SIZE * (x - 1) + ret + 1, sizeof(char));
	if (str == NULL)
		return (NULL);
//	printf("Wel\n");
//	printf("%s\n", tmp);
	while (tmp != NULL && tmp[i])
	{
		str[i] = tmp[i];
		i++;
	}
//	printf("Niet\n");
	while (buf[b])
	{
		str[i] = buf[b];
		b++;
		i++;
	}
	return (str);
}

void	ft_end_fixer(char *buf, int ret)
{
	if (ret != BUFFER_SIZE)
		buf[0] = 0;
}

int		get_next_line(int fd, char **line)
{
	static char	buf[BUFFER_SIZE];
	char		*str;
	char		*tmp;
	int			x;
	int			ret;

	x = 1;
	tmp = NULL;
	str = NULL;
	ret = 1;
	tmp = ft_empty_buffer(buf, tmp);
	while (ret > 0)
	{
		ret = read(fd, buf, BUFFER_SIZE);
//		printf("ret=%i\tGelezenBuf=%sTOTHIER\n", ret, buf);
		str = ft_setstring(str, buf, tmp, x, ret);
		tmp = strdup(str);
		if (ft_newlinecheck(tmp) > 0)
		{
			*line = strndup(tmp, ft_newlinecheck(tmp));
			return (1);
		}
		x++;
	}
	return (0);
}

int		main(void)
{
	char	*line;
	int		fd;
	int i = 0;
	fd = open("42", O_RDONLY);
//	get_next_line(fd, &line);
//	printf("%s\n", line);
	while (i < 10)
	{
		get_next_line(fd, &line);
		printf("%s\n", line);
		i++;
	}
	close(3);
	return (0);
}
